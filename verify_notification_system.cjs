#!/usr/bin/env node

/**
 * VERIFICATION SCRIPT: SISTEMA DE NOTIFICACIONES - FASE 3
 *
 * Este script verifica que el sistema de notificaciones est√© correctamente
 * configurado y funcional.
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.VITE_SUPABASE_ANON_KEY
);

async function verifyNotificationSystem() {
  console.log('üîç Verificando sistema de notificaciones...\n');

  let allChecksPass = true;

  // 1. Verificar tablas (intentar operaciones b√°sicas)
  console.log('üìã Verificando tablas...');
  const tables = [
    'notification_preferences',
    'notifications',
    'notification_logs',
    'reminder_rules',
    'scheduled_tasks'
  ];

  for (const table of tables) {
    try {
      // Intentar una operaci√≥n de selecci√≥n simple
      const { error } = await supabase
        .from(table)
        .select('id')
        .limit(1);

      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
        console.log(`‚ùå Tabla ${table}: ERROR - ${error.message}`);
        console.log(`   üí° Posible soluci√≥n: Crear la tabla manualmente en Supabase Dashboard`);
        allChecksPass = false;
      } else {
        console.log(`‚úÖ Tabla ${table}: OK`);
      }
    } catch (error) {
      console.log(`‚ùå Tabla ${table}: ERROR - ${error.message}`);
      console.log(`   üí° Posible soluci√≥n: Crear la tabla manualmente en Supabase Dashboard`);
      allChecksPass = false;
    }
  }

  // 2. Verificar datos iniciales
  console.log('\nüìä Verificando datos iniciales...');

  try {
    const { data: rules, error } = await supabase
      .from('reminder_rules')
      .select('name, type, is_active')
      .eq('is_active', true);

    if (error) {
      console.log(`‚ùå Reglas de recordatorios: ERROR - ${error.message}`);
      allChecksPass = false;
    } else if (!rules || rules.length === 0) {
      console.log('‚ùå Reglas de recordatorios: No hay reglas activas');
      allChecksPass = false;
    } else {
      console.log(`‚úÖ Reglas de recordatorios: ${rules.length} reglas activas`);
      rules.forEach(rule => {
        console.log(`   - ${rule.name} (${rule.type})`);
      });
    }
  } catch (error) {
    console.log(`‚ùå Reglas de recordatorios: ERROR - ${error.message}`);
    allChecksPass = false;
  }

  // 3. Verificar configuraci√≥n de proveedores
  console.log('\n‚öôÔ∏è Verificando configuraci√≥n de proveedores...');

  const providers = {
    'SendGrid': process.env.SENDGRID_API_KEY,
    'Twilio Account SID': process.env.TWILIO_ACCOUNT_SID,
    'Twilio Auth Token': process.env.TWILIO_AUTH_TOKEN,
    'Twilio Phone Number': process.env.TWILIO_PHONE_NUMBER,
    'Firebase Server Key': process.env.FIREBASE_SERVER_KEY
  };

  let configuredProviders = 0;
  for (const [name, value] of Object.entries(providers)) {
    if (value) {
      console.log(`‚úÖ ${name}: Configurado`);
      configuredProviders++;
    } else {
      console.log(`‚ö†Ô∏è ${name}: No configurado`);
    }
  }

  if (configuredProviders === 0) {
    console.log('‚ö†Ô∏è Advertencia: No hay proveedores externos configurados. Solo funcionar√°n notificaciones in-app.');
  }

  // 4. Verificar permisos RLS
  console.log('\nüîí Verificando permisos RLS...');

  try {
    // Intentar consultar con usuario an√≥nimo (deber√≠a fallar para datos sensibles)
    const { error } = await supabase
      .from('reminder_rules')
      .select('*')
      .limit(1);

    if (error && error.code === 'PGRST301') { // RLS bloqueando acceso
      console.log('‚úÖ Pol√≠ticas RLS: OK (bloqueando acceso no autorizado)');
    } else {
      console.log('‚ö†Ô∏è Pol√≠ticas RLS: Verificar configuraci√≥n de seguridad');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Pol√≠ticas RLS: Error al verificar');
  }

  // 5. Verificar funciones
  console.log('\n‚ö° Verificando funciones...');

  try {
    const { data, error } = await supabase.rpc('get_notification_stats');

    if (error) {
      console.log(`‚ùå Funci√≥n get_notification_stats: ERROR - ${error.message}`);
      allChecksPass = false;
    } else {
      console.log('‚úÖ Funci√≥n get_notification_stats: OK');
    }
  } catch (error) {
    console.log(`‚ùå Funci√≥n get_notification_stats: ERROR - ${error.message}`);
    allChecksPass = false;
  }

  // 6. Probar creaci√≥n de notificaci√≥n de prueba
  console.log('\nüß™ Probando creaci√≥n de notificaci√≥n...');

  try {
    const testNotification = {
      type: 'system_alert',
      priority: 'normal',
      status: 'pending',
      recipient_id: 'test_user',
      recipient_type: 'admin',
      recipient_email: 'test@example.com',
      message: 'Notificaci√≥n de prueba del sistema de verificaci√≥n',
      channels: ['email'],
      scheduled_at: new Date().toISOString(),
      retry_count: 0,
      max_retries: 3,
      metadata: { test: true }
    };

    const { data, error } = await supabase
      .from('notifications')
      .insert(testNotification)
      .select()
      .single();

    if (error) {
      console.log(`‚ùå Creaci√≥n de notificaci√≥n: ERROR - ${error.message}`);
      allChecksPass = false;
    } else {
      console.log('‚úÖ Creaci√≥n de notificaci√≥n: OK');

      // Limpiar notificaci√≥n de prueba
      await supabase
        .from('notifications')
        .delete()
        .eq('id', data.id);
    }
  } catch (error) {
    console.log(`‚ùå Creaci√≥n de notificaci√≥n: ERROR - ${error.message}`);
    allChecksPass = false;
  }

  // 7. Verificar integraci√≥n con citas
  console.log('\nüìÖ Verificando integraci√≥n con citas...');

  try {
    // Verificar que existe tabla de appointments
    const { error } = await supabase
      .from('appointments')
      .select('count')
      .limit(1);

    if (error && error.code !== 'PGRST116') {
      console.log(`‚ùå Tabla appointments: ERROR - ${error.message}`);
      console.log('   Aseg√∫rate de que la tabla de citas est√© creada');
    } else {
      console.log('‚úÖ Tabla appointments: OK');
    }
  } catch (error) {
    console.log(`‚ùå Tabla appointments: ERROR - ${error.message}`);
  }

  // Resultado final
  console.log('\n' + '='.repeat(50));
  if (allChecksPass) {
    console.log('üéâ ¬°Sistema de notificaciones verificado exitosamente!');
    console.log('\n‚úÖ Todas las verificaciones pasaron correctamente.');
    console.log('üöÄ El sistema est√° listo para usar.');
  } else {
    console.log('‚ö†Ô∏è Algunas verificaciones fallaron.');
    console.log('üîß Revisa los errores arriba y configura lo necesario.');
  }
  console.log('='.repeat(50));

  // Recomendaciones
  console.log('\nüí° RECOMENDACIONES:');
  console.log('1. Configura las variables de entorno para proveedores externos');
  console.log('2. Ejecuta el scheduler regularmente para procesar notificaciones');
  console.log('3. Monitorea las estad√≠sticas de env√≠o en el dashboard');
  console.log('4. Configura las preferencias de notificaci√≥n de los usuarios');
  console.log('5. Prueba el sistema con notificaciones reales');

  process.exit(allChecksPass ? 0 : 1);
}

// Ejecutar verificaci√≥n
verifyNotificationSystem().catch(error => {
  console.error('‚ùå Error fatal durante la verificaci√≥n:', error);
  process.exit(1);
});