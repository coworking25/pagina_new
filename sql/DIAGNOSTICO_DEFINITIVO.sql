-- =====================================================
-- PRUEBA DEFINITIVA: Simular login y verificar is_admin()
-- =====================================================

-- PASO 1: Verificar estado actual del usuario
SELECT
  'üîç ESTADO ACTUAL DEL USUARIO:' as analisis,
  CASE
    WHEN EXISTS (SELECT 1 FROM auth.users WHERE email = 'jaideradmin@gmail.com')
    THEN '‚úÖ Existe en auth.users'
    ELSE '‚ùå NO existe en auth.users'
  END as auth_users,
  CASE
    WHEN EXISTS (SELECT 1 FROM public.user_profiles WHERE email = 'jaideradmin@gmail.com')
    THEN '‚úÖ Existe en user_profiles'
    ELSE '‚ùå NO existe en user_profiles'
  END as user_profiles;

-- PASO 2: Detalles del usuario
SELECT
  'üë§ DETALLES EN auth.users:' as tabla,
  id,
  email,
  email_confirmed_at,
  created_at,
  last_sign_in_at
FROM auth.users
WHERE email = 'jaideradmin@gmail.com';

SELECT
  'üë§ DETALLES EN user_profiles:' as tabla,
  id,
  email,
  full_name,
  role,
  is_active,
  created_at,
  last_login_at
FROM public.user_profiles
WHERE email = 'jaideradmin@gmail.com';

-- PASO 3: Simular lo que hace el frontend
-- El frontend llama a supabase.rpc('is_admin')
-- Esta funci√≥n usa auth.uid() para obtener el ID del usuario actual
-- Pero en el SQL Editor no hay sesi√≥n activa, as√≠ que auth.uid() retorna NULL

-- Para probar correctamente, necesitamos simular una sesi√≥n
-- Esto es lo que realmente sucede cuando el usuario est√° logueado:

-- Simulaci√≥n: Si el usuario jaideradmin@gmail.com estuviera logueado,
-- auth.uid() retornar√≠a su ID. Vamos a probar la l√≥gica manualmente:

SELECT
  'üéØ SIMULACI√ìN DE is_admin() PARA USUARIO LOGUEADO:' as test,
  up.email,
  up.role,
  up.is_active,
  CASE
    WHEN up.role = 'admin' AND up.is_active = true
    THEN '‚úÖ is_admin() DEBER√çA RETORNAR TRUE'
    ELSE '‚ùå is_admin() RETORNAR√çA FALSE'
  END as resultado_esperado,
  CASE
    WHEN up.id IS NOT NULL AND up.role = 'admin' AND up.is_active = true
    THEN '‚úÖ USUARIO PUEDE ACCEDER A ADMIN'
    ELSE '‚ùå USUARIO NO PUEDE ACCEDER A ADMIN'
  END as acceso_admin
FROM public.user_profiles up
WHERE up.email = 'jaideradmin@gmail.com';

-- PASO 4: Verificar funci√≥n is_admin() existe y es correcta
SELECT
  'üîß VERIFICACI√ìN DE FUNCI√ìN is_admin():',
  CASE
    WHEN EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'is_admin')
    THEN '‚úÖ Funci√≥n existe'
    ELSE '‚ùå Funci√≥n NO existe'
  END as funcion_existe,
  CASE
    WHEN EXISTS (
      SELECT 1 FROM pg_proc p
      JOIN pg_language l ON p.prolang = l.oid
      WHERE p.proname = 'is_admin' AND l.lanname = 'plpgsql'
    )
    THEN '‚úÖ Funci√≥n est√° en PL/pgSQL'
    ELSE '‚ùå Funci√≥n no est√° en PL/pgSQL'
  END as lenguaje_correcto;

-- PASO 5: Verificar permisos de ejecuci√≥n
SELECT
  'üîê PERMISOS DE EJECUCI√ìN:' as seguridad,
  CASE
    WHEN EXISTS (
      SELECT 1 FROM information_schema.role_routine_grants
      WHERE routine_name = 'is_admin'
      AND grantee = 'authenticated'
    )
    THEN '‚úÖ Usuarios autenticados pueden ejecutar'
    ELSE '‚ùå Usuarios autenticados NO pueden ejecutar'
  END as permisos_autenticados;

-- PASO 6: Diagn√≥stico final
SELECT
  'üéØ DIAGN√ìSTICO FINAL:' as resultado,
  CASE
    WHEN EXISTS (SELECT 1 FROM auth.users WHERE email = 'jaideradmin@gmail.com')
    AND EXISTS (SELECT 1 FROM public.user_profiles WHERE email = 'jaideradmin@gmail.com' AND role = 'admin' AND is_active = true)
    AND EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'is_admin')
    THEN '‚úÖ TODO EST√Å CONFIGURADO CORRECTAMENTE - EL PROBLEMA EST√Å EN EL FRONTEND'
    ELSE '‚ùå HAY PROBLEMAS EN LA CONFIGURACI√ìN'
  END as estado_general,
  CASE
    WHEN NOT EXISTS (SELECT 1 FROM auth.users WHERE email = 'jaideradmin@gmail.com')
    THEN 'Usuario no existe en Supabase Auth'
    WHEN NOT EXISTS (SELECT 1 FROM public.user_profiles WHERE email = 'jaideradmin@gmail.com')
    THEN 'Usuario no tiene perfil en user_profiles'
    WHEN EXISTS (SELECT 1 FROM public.user_profiles WHERE email = 'jaideradmin@gmail.com' AND role != 'admin')
    THEN 'Usuario no tiene rol admin'
    WHEN EXISTS (SELECT 1 FROM public.user_profiles WHERE email = 'jaideradmin@gmail.com' AND is_active = false)
    THEN 'Usuario est√° inactivo'
    WHEN NOT EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'is_admin')
    THEN 'Funci√≥n is_admin() no existe'
    ELSE 'Problema en el frontend: sesi√≥n no activa o error de conexi√≥n'
  END as problema_identificado;